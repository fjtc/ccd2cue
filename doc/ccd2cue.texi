@c ccd2cue.texi -- The ccd2cue Manual

@c Copyright 2013 Bruno Félix Rezende Ribeiro (oitofelix@riseup.net)

@c This program is free software: you can redistribute it and/or modify
@c it under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.

@c This program is distributed in the hope that it will be useful,
@c but WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.

@c You should have received a copy of the GNU General Public License
@c along with this program.  If not, see <http://www.gnu.org/licenses/>.

\input texinfo  @c -*-texinfo-*-

@c %**start of header
@setfilename ccd2cue.info
@documentencoding UTF-8
@c @documentlanguage en_US
@firstparagraphindent insert
@footnotestyle end
@include version.texi
@settitle The ccd2cue Manual
@defindex cdfF
@defindex ccdS
@defindex ccdP
@defindex cueC
@syncodeindex pg cp
@syncodeindex cdfF cp
@syncodeindex ccdS cp
@syncodeindex ccdP cp
@syncodeindex cueC cp
@c %**end of header





@c --- Start Macros;
@macro webdoc{text, url}
@inlinefmtifelse{info, @emph{\text\}@footnote{See @url{\url\}.},
@inlinefmtifelse{html, @url{\url\,,\text\},
@inlinefmtifelse{tex, @url{\url\,,@emph{\text\}}@footnote{See @url{\url\}.},
@url{\url\,,@emph{\text\}}@footnote{See @url{\url\}.}}}}
@end macro

@macro cdfRef{field}
@ref{\field\ (Compact Disc fields)}
@end macro

@macro ccdSectionRef{section}
@ref{\section\ (CCD Section)}
@end macro

@macro ccdPropertyRef{section, property}
@ref{\property\ (\section\ CCD Section)}
@end macro

@macro cueRef{command}
@ref{\command\ (CUE Command)}
@end macro

@macro n
@inlinefmt{tex,}
@end macro

@c --- End Macros;





@c --- Copying;
@copying
The program ccd2cue is a CCD sheet to CUE sheet converter.  It
supports the full extent of CUE sheet format expressiveness, including
mixed-mode discs and CD-Text meta-data.

This manual is for ccd2cue version @value{VERSION}.

Copyright @copyright{} 2013 Bruno Félix Rezende Ribeiro

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections.  A copy of the license is included in the section
entitled ``GNU Free Documentation License.''
@end quotation
@end copying





@c --- Info directory entry
@dircategory Converter
@direntry
* ccd2cue: (ccd2cue)The CCD sheet to CUE sheet converter.
@end direntry

@c --- Info Top Node
@ifnottex
@node Top
@top The CCD sheet to CUE sheet converter
@insertcopying
@end ifnottex

@menu
* Preface::      Motivation, program definition and document organization.

Instructional:
* Distribution:: Rules of distribution, how to get in touch and contribute.
* Installation:: Full build and installation instructions.
* Use::          How the program works, how to invoke and use it.

Appendices:
* Compact Disc fields::            Common concepts to all sheets.
* CCD sheet format::               Unofficial and partial format reference.
* CUE sheet format::               Reference.
* GNU General Public License::     The license for the program.
* GNU Free Documentation License:: The license for this documentation.

Indexes:
* Index::
@end menu





@c --- TeX title page;
@titlepage
@title The ccd2cue Manual
@subtitle for version @value{VERSION} (@value{UPDATED})
@author Bruno Félix Rezende Ribeiro (@email{oitofelix@@riseup.net})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents


@c --- Preface;
@node Preface
@unnumbered Preface
@cindex introduction

@cindex manifesto
@cindex ccd2cue motivation
@cindex motivation to write ccd2cue
@cindex ccd2cue history
@cindex history of ccd2cue
@cindex ccd2cue origin
@cindex origin of ccd2cue
@quotation Manifesto
On the internet there is a gigantic quantity of optical disc image
files in numerous formats.  Countless times we need to burn some of
them.  Some time ago I needed it, but I came across a file format
extremely irritating for a Free Software user like me: a CD layout
descriptor file, with @file{.ccd} suffix, generated by a proprietary
software called CloneCD.  I searched the internet for a way to burn
that file on the GNU+Linux-Libre system, but I only found a lot of
people asking for a solution on a lot of forums, and getting the
unanimous answer: no way!  At first I could not believe at that point
there was no option.  Then, with a little of patience and research, I
wrote some code to convert that files to a format much more common and
accessible, an ad-hoc standard in the GNU operating system: the CUE
sheet format.  So I could burn a lot of what I wanted!  I wondered
whether it would be useful for others@dots{} and here is the result!
@author Bruno Félix
@end quotation

@cindex proprietary software
@cindex freedom denying software
@cindex user-subjugating software
@pindex CloneCD proprietary program
@pindex program CloneCD (proprietary)
@iftex
@sp 1
@end iftex
There is a well known and widely employed proprietary optical disc
authoring software called CloneCD@footnote{Designed to run on an
equally freedom-restricting and user-subjugating platform known as
Microsoft Windows.} which is intended to make a nearly exact copy of
audio and/or data optical discs for archival and/or reproduction
purposes.  When making a copy of an optical disc to hard disk that
program can output three files: audio/data raw image, sub-channel data
and layout description.  The ccd2cue program operates exclusively on
the latter to produce a hopefully equivalent@footnote{As far as
possible to the full extent of CUE sheet format expressiveness.}
layout description in the CUE sheet format and possibly a companion
CD-Text meta-data file.  Since there are free software packages that
can easily and fully handle CUE sheet files, this frees the user from
the temptation to use a proprietary program or from the burden of
searching for the desired disc data into a supposedly more free
software friendly format.

@pindex cdrdao program
@pindex program cdrdao
@cindex TOC sheet format
@cindex format of TOC sheet
One such software capable of burning a raw image file laid out by a
CUE sheet file, as well as to convert a CUE sheet file to the TOC
sheet format, is @webdoc{cdrdao, http://cdrdao.sourceforge.net/}.

@cindex ccd2cue features
@cindex features of ccd2cue
@noindent
Notably, ccd2cue can handle:
@itemize
@item
Mixed-mode CCD sheet file@footnote{A sheet describing the layout of a disc
which contains simultaneously audio and data tracks.};
@item
CD-Text meta-data@footnote{A method for storing disc and track
relevant information (like album, song and artist names) on a standard
compliant audio CD.};
@item
Track special sub-code flags@footnote{In-disc information that
determines copy restriction (very bad!) and audio track
characteristics like 4 channel audio and track pre-emphasis.};
@end itemize

@cindex manual organization
@cindex organization of this manual
@cindex documentation organization
@iftex
@need 2000
@end iftex
This manual is split in two major logical segments: instruction and
reference.  In the former resides the manual content targeted to
instructional, reasonably tutorial, use.  It is composed by the
following chapters:

@table @emph
@item Distribution
Briefly explains the rules of distribution of ccd2cue and its
documentation, how to contact the ccd2cue community, how to fill bug
reports, how to contribute to the project and how to hack the code.
@item Installation
Gives full build and installation instructions for stable releases.
Include localization matters.
@item Use
Teach how the program works from the user's perspective, how to use it
for the most common cases and describes the ccd2cue invocation and
accepted options.
@end table

@iftex
@sp 1
@noindent
@end iftex
In the latter, one can find the reference material comprised of the
following appendices:

@table @emph
@item Compact Disc fields
Describes some Compact Disc information that are common concepts to
CCD and CUE sheet formats.
@item CCD sheet format
Describes the CCD sheet format (at least the part we know about --- it
is a reverse engineering process, and you are encouraged to help).
@item CUE sheet format
Describes the CUE sheet format.
@end table

@iftex
@sp 1
@noindent
@end iftex
Now that you are acquainted to the program and documentation,
@strong{HAPPY@tie{}HACKING!}





@c --- Distribution;
@node Distribution
@chapter Distribution

@cindex free software
@cindex free documentation
@cindex user rights
@cindex rights of the user
@cindex ccd2cue distribution
@cindex distribution of ccd2cue
The program ccd2cue is @dfn{free software}; this means that everyone
is free to use it and free to redistribute it under certain
conditions.  The program ccd2cue is not in the public domain; it is
copyrighted and there are restrictions on its distribution, but these
restrictions are designed to permit everything that a good cooperating
citizen would want to do.  What is not allowed is to try to prevent
others from further sharing any version of ccd2cue that they might get
from you.  The precise conditions are found in the GNU General Public
License that comes with ccd2cue and also appears in this
manual@footnote{This manual is itself covered by the GNU Free
Documentation License.  This license is similar in spirit to the
General Public License, but is more suitable for documentation.
@xref{GNU Free Documentation License}.}.  @xref{GNU General Public
License}.

@cindex ccd2cue site
@cindex site of ccd2cue
@cindex ccd2cue in web
@cindex atom feed
@cindex feed of updates
For more information about this program you can visit its home page at
@url{http://www.nongnu.org/ccd2cue/}.  If you want to receive
notifications about new releases of this program or important issues
related to it, subscribe to the mailing list, as described in
@ref{Getting in touch}, or subscribe to the project atom feed
@url{https://savannah.nongnu.org/news/atom.php?group=ccd2cue}.

@c --- Menu;

@menu
* Getting a copy::   How to get a copy of the program and its documentation.
* Getting in touch:: How to contact developers and user community.
* Bug reporting::    How to fill a bug report.
* Contributing::     How to contribute to ccd2cue development and its community.
* Hacking::          How to hack the code.
@end menu


@c --- Getting a copy;
@node Getting a copy
@section Getting a copy

@cindex copying ccd2cue
@cindex ccd2cue copying
One way to get a copy of ccd2cue is from someone else who has it.  You
need not ask for our permission to do so, or tell any one else; just
copy it.  You may also receive ccd2cue when you buy a computer.
Computer manufacturers are free to distribute copies on the same terms
that apply to everyone else.  These terms require them to give you the
full sources, including whatever changes they may have made, and to
permit you to redistribute the ccd2cue received from them under the
usual terms of the General Public License.  In other words, the
program must be free for you when you get it, not just free for the
manufacturer.

@cindex ccd2cue release
@cindex release ccd2cue
If you have access to the Internet, you can get the latest
distribution version of ccd2cue at
@url{http://download.savannah.gnu.org/releases/ccd2cue/}.  Please, use
a mirror if possible; you will be automatically redirected to the
nearest mirror at
@url{http://download-mirror.savannah.gnu.org/releases/ccd2cue/}.

@cindex ccd2cue cvs repository
@cindex cvs repository of ccd2cue
@cindex ccd2cue development version
@cindex development version of ccd2cue
A CVS repository, where the development takes place, is also
available.  It maintains the full history of modifications of every
single source file.  You can checkout any given revision of any file
or get a snapshot of the entire source tree in a particular desired
state.  Special build tools, as described in @ref{Hacking}, are
required to build from those checkouts, though.  Notably, to stay up
to date with the latest developments in the source tree, you can
anonymously checkout the repository with the following command:
@example
cvs -z3 -d:pserver:anonymous@@cvs.savannah.nongnu.org:\
/sources/ccd2cue co ccd2cue
@end example


@c --- Getting in touch;
@node Getting in touch
@section Getting in touch

@cindex contact user community
@cindex user community contact
@cindex community contact
@cindex developers contact
@cindex contact developers
@cindex ccd2cue mailing list
@cindex mailing list of ccd2cue
You can get in touch with other users and the developers of ccd2cue
subscribing to the mailing list.  Anyone is welcome to join the list;
to do so, visit
@url{http://lists.nongnu.org/mailman/listinfo/ccd2cue-bug/} or send an
email to @email{ccd2cue-bug-join@@nongnu.org}.  You can use this list
for all discussion, including asking for help and bug reporting,
although the preferred method for reporting bugs is the dedicated bug
tracking web interface described in @ref{Bug reporting}.  To post a
message to all the list members, send email to
@email{ccd2cue-bug@@nongnu.org}.  To see the collection of prior
postings to the list, visit its archive at:
@url{http://lists.nongnu.org/archive/html/ccd2cue-bug/}.

@cindex ccd2cue in IRC
@cindex IRC channel of ccd2cue
If you feel somewhat chatty, eager for more instantaneous response
from community, you can join us on our friendly IRC channel:
@display
#ccd2cue at freenode.net
@end display


@c --- Bug reporting;
@node Bug reporting
@section Bug reporting
@cindex ccd2cue bug reporting
@cindex bug reporting of ccd2cue
@cindex report a bug in ccd2cue
@cindex support on ccd2cue
@cindex ccd2cue, getting support
If you come across some problem and need help you can contact the
community as described @xref{Getting in touch}.  If you think you
found a bug, but is not quite sure about it, you can instead ask for
support on our support tracker at
@url{https://savannah.nongnu.org/support/?group=ccd2cue}.
We will revise your post, advise you and take the appropriate
measures.  If you are confident you have found a bug, you can submit a
bug report directly at our bug tracker:
@url{https://savannah.nongnu.org/bugs/?group=ccd2cue}.  Please, when
reporting a bug include enough information for the maintainers to
reproduce the problem.  Generally speaking, that means:

@itemize
@item
The contents of any input files necessary to reproduce the bug and
command line invocations of the program(s) involved (crucial!).
@item
A description of the problem and any samples of the erroneous output.
@item
The version number of the program(s) involved (use
@option{--version}).
@item
Hardware, operating system, and compiler versions (@code{uname -a}).
@item
Unusual options you gave to configure, if any (see
@file{config.status}).
@item
Anything else that you think would be helpful.
@end itemize


@c --- Contributing;
@node Contributing
@section Contributing
@cindex Helping ccd2cue development
@cindex Contributing to ccd2cue development
@cindex ccd2cue, contributing to development

The program ccd2cue is a collaborative project and we encourage
contributions from anyone and everyone.  You can help in many ways:

@itemize
@item
@cindex donation
@cindex supporting development
@cindex development, supporting it
If you find ccd2cue useful, please @strong{send a donation} to the
author to support his work.  If you use ccd2cue at your workplace,
please suggest that the company make a donation.
@item
Write documentation.  We are specially in need to complete the CCD
sheet format specification.
@item
Help users in the mailing list and IRC channel.
@item
Find and report bugs.  @xref{Bug reporting}.
@item
Fix reported bugs.
@item
Implement new feature ideas.
@end itemize

@cindex ccd2cue project site
@cindex project site of ccd2cue
@cindex development site
You can join the development team to contribute code and documentation
at @url{https://savannah.nongnu.org/projects/ccd2cue/}.  Contributed
code should follow the GNU Coding Standards.  @xref{,,, standards, GNU
Coding Standards}.  If it doesn't, we'll need to find someone to fix
the code before we can use it.  It is also necessary that the
contributor be willing to assign their copyright to the @acronym{FSF,
Free Software Foundation}, since the original author plans to make it
officially part of the GNU operating system and wants FSF to enforce
the program license.


@c --- Hacking;
@node Hacking
@section Hacking
@cindex hacking ccd2cue
@cindex ccd2cue hacking
@cindex building from cvs
@cindex development version, building
@noindent
The development sources are available through CVS at Savannah:

@display
https://savannah.nongnu.org/cvs/?group=ccd2cue
@end display

If you are getting the sources from CVS (or change
@file{configure.ac}), you'll need to have Automake, Autoconf and
Gettext installed to (re)build.  You'll also need help2man.  All of
these programs are available from @url{ftp://ftp.gnu.org/gnu}.

After getting the CVS sources, and installing the tools above, you can
run @code{./bootstrap} to do a fresh build.  After that first time,
running @command{make} should suffice.  @xref{Installation}.

When modifying the sources, or making a distribution, more is needed,
as follows:

@itemize
@item
This distribution also uses Gnulib
(@url{http://www.gnu.org/software/gnulib}) to share common files,
stored as a submodule in git.
@item
When updating gettext, besides the normal installation on the system,
it is necessary to run @code{gettextize -f} in this hierarchy to
update the @file{po/} infrastructure.  After doing so, rerun
@code{gnulib-tool --import} since otherwise older files will have been
imported.  @xref{,,, gnulib, Gnulib Manual}, for more information.
@end itemize



@c --- Installation;
@node Installation
@chapter Installation

@include install.texi






@c --- Use;
@node Use
@chapter Use

@cindex ccd2cue use
@cindex using ccd2cue
Firstly, it is important to discern between the various files involved
in the conversion operation accomplished by ccd2cue.  The whole
process consists basically of a conversion of the CCD set of files
into a CUE set of files, whose meaning is, by suffix, described below:

@cindex CCD set of files
@cindex set of files of CCD
@iftex
@sp 1
@end iftex
In the @dfn{CCD set} all files have the same base-name and the
respective suffixes are mandatory.  It is composed by:
@table @file
@item .img
Audio/data raw image (hereafter called @dfn{image file});
@item .sub
Sub-channel data (hereafter called @dfn{sub-channel file});
@item .ccd
Layout description (hereafter called @dfn{CCD sheet file});
@end table

@cindex CUE set of files
@cindex set of files of CUE
@iftex
@sp 1
@end iftex
In the @dfn{CUE set} not all files have necessarily the same base-name
and the respective suffixes are just an optional default.  It is
composed by:
@table @file
@item .bin
The same image file as above with the traditional suffix;
@item .cdt
CD-Text meta-data file (hereafter called @dfn{CD-Text file});
@item .cue
Layout description (hereafter called @dfn{CUE sheet file});
@end table

@cindex ccd2cue operation
@cindex operation of ccd2cue
@iftex
@sp 1
@end iftex
The ccd2cue program never touches any of the files in the CCD set; not
even to rename the image file to use the traditional @file{.bin}
suffix.  However it will still work with other software because the
image file is explicitly referenced inside the CUE sheet file.  The
idea is to take the less intrusive approach, e.g., to have both sets
of files simultaneously without any interfering with each other.
Although we are against the use and development of any proprietary
program, including those which can handle CCD sheets@footnote{Actually
I'm really sorry those programs came into existence in the first
place.  I wish I never had to write a program like ccd2cue.  I would
then be contributing to society in a way that directly advances the
social good, not just alleviating the wrong doing of others that
immersed in their own egoism and blindness desire to subjugate their
neighbors for their own benefit.}, it can be useful to have the
original CCD sheet for reference, in case the conversion process is
improved in a subsequent release; or more expressive destination
formats@footnote{The TOC sheet format is an example.} become
supported; or just for debugging.

The ccd2cue program has just one non-trivial operation: the conversion
and only rely on the information contained inside the CCD sheet file
to generate the equivalent CUE sheet file.  Thus, ccd2cue does not
enforce, and actually does not even check, if you have the sub-channel
file, or even more important, the actual image file.  Therefore,
although it is possible to generate seamlessly a CUE sheet file from a
lone CCD sheet file, it is a must to have also, at least, the
correspondent image file when burning the disc.

@cindex sub-channel information
@cindex @file{.sub} file
@cindex file with @file{.sub} suffix
While the image file is not used by ccd2cue but is referenced in the
produced CUE sheet file, the sub-channel file is not used nor
referenced at all in the CUE sheet file.  The CUE sheet format was not
designed to describe the information found in the sub-channel file and
most optical disc authoring software seems to ignore it when guided by
a CUE sheet file.  Therefore, does not expect to obtain an exact copy,
at sub-channel level, using the CUE sheet file to guide your burning
software.  Nevertheless, for the vast majority of practical uses the
extra sub-channel data contained in the sub-channel file can be fully
ignored producing yet usable discs for the intended application.
Notice however that that does not mean CUE sheet format is incapable
of describing any sub-channel data; in fact it describes the most
remarkable ones.  Hence all that data is available for ccd2cue not
inside the sub-channel file but rather in the CCD sheet file itself;
the CD-Text meta-data is such a case --- the CD-Text file is produced
from decoded sub-channel information available inside the CCD sheet
file.

@c --- Menu;
@menu
* Tutorial::   Easy and fast to learn case by case.
* Invocation:: Formal and canonical list of options and meanings.
@end menu

@c --- Tutorial;
@node Tutorial
@section Tutorial
@cindex ccd2cue tutorial

@cindex simple use case
@cindex converting CCD sheet
The most ordinary use case is when you have a CCD set of files and
just want to generate a CUE sheet file in order to burn or otherwise
access the data inside the image file.  Supposing your CCD sheet file
is called free-as-in-freedom.ccd, you are done with the command:

@example
ccd2cue -o free-as-in-freedom.cue free-as-in-freedom.ccd
@end example

@cindex ccd2cue, omitting output option
@cindex omitting output option of ccd2cue
Remember that if your CCD sheet file name has spaces or unusual
characters, like @samp{$}, you are better quoting the whole name with
@samp{'}.  Naturally the CUE sheet file don't need to have the same
base name as the CCD sheet file.  You can give an adequate CUE sheet
output file name, at your discretion, to the @option{-o}
(@option{--output}) option.  If you omit the @option{-o} option
entirely as in

@example
ccd2cue free-as-in-freedom.ccd
@end example

@noindent
the result is that the yielding CUE sheet is written to the standard
output, giving you the chance to pipe it out to another command or to
use the shell to redirect it to a file, as you would do without it
using the @option{-o} option.  The same thing is accomplished passing
@code{-} as an argument to option @option{-o}.

@cindex ccd2cue, omitting all arguments
@cindex omitting all arguments of ccd2cue
@cindex file name deduction algorithm
@cindex deduction of file names
May you guess what happens if we omit the CCD sheet input file
specification as well?  If you answered that ccd2cue will read the CCD
sheet input from standard input and write the correspondent CUE sheet
output to standard output, unfortunately you are wrong.  It would be
nice if it behaved that way, but there is an inherent design drawback:
the CUE sheet need to reference an image file and possibly a CD-Text
file; that way how can it have any clue about those file names?  For
that reason it is always necessary to supply at least one file name in
an option or non-option argument, that way ccd2cue can deduce the
remaining file names needed.  The deduction algorithm is very simple:
get the file name supplied, in the following preference order:

@enumerate
@item CCD sheet input file name (non-option argument);
@item CUE sheet output file name (@option{-o}, @option{--output});
@item Image file name (@option{-i}, @option{--image});
@item CD-Text file name (@option{-c}, @option{--cd-text});
@end enumerate

@cindex stdin to stdout
@cindex full piping
@cindex piping input and output
@noindent
conserve only its base name and concatenate the canonical suffix.
Therefore, if you want to read the CCD sheet input from standard input
and write the CCD sheet output to standard output, it is enough to
just make explicit the name of a image name, possibly with a
nonstandard suffix, regardless of the actual existence of the image
file, like in

@example
ccd2cue -i free-as-in-free-speech.img
@end example

@noindent
being @file{free-as-in-free-speech.img} the demanded image file name.
On the other hand, you can use the @option{-i} (@option{--image}) in
conjunction with the CCD sheet file name and/or CUE sheet file name
just to override the image file name deduction.  As expected, the
argument @code{-} in place of the CCD sheet file name, will also make
ccd2cue read its CCD sheet input from standard input.

@cindex absolute file name deduction
@cindex deduction using absolute file names
If, for some weird reason, you want to move the CUE sheet file around
while keeping the image file in its original place and yet be able to
normally use this pair as if they were in the same directory, you can
use the option @option{-a} (@option{--absolute-file-name}).  That
option will make the file name deduction algorithm explained above to
conserve the absolute directory name for each file; however, as a
consequence of this approach, it will only work for file names not
directly supplied, but deduced by the program.

@cindex CD-Text file generation
@cindex outputting CD-Text file
When ccd2cue detects CD-Text data information inside the CCD sheet, it
outputs a CD-Text file, whose name is determined by the same file name
deduction rules just described, unless overridden by the option
@option{-c} (@option{--cd-text}).  It is not possible to output the
binary CD-Text data to standard output, however.




@c --- Invocation;
@node Invocation
@section Invocation
@cindex command-line syntax
@cindex calling @command{ccd2cue}
@cindex invoking @command{ccd2cue}
@cindex @command{ccd2cue} options
@cindex @command{ccd2cue} invocation

The program @command{ccd2cue} is used to convert CCD sheet files in
CUE sheet files. It is invoked as follow:

@example
ccd2cue [@var{OPTION}@dots{}] [@var{ccd-file}]
@end example

The input file, referred as @file{@var{ccd-file}}, must exist.  If
@file{@var{ccd-file}} is @samp{-}, or omitted, standard input is used.

@iftex
@sp 1
@end iftex
@noindent
@emph{Output} options:
@table @code
@item -c
@itemx --cd-text=@file{@var{cdt-file}}
Write CD-Text data to @file{@var{cdt-file}}.
@item -o
@itemx --output=@file{@var{cue-file}}
Write output to @file{@var{cue-file}}.
@end table

While the main output file @file{@var{cue-file}} is always generated, the
@file{@var{cdt-file}} is created only when there is CD-Text info.  If
@file{@var{cue-file}} is @samp{-}, or @option{--output} is omitted, standard
output is used.

@iftex
@sp 1
@end iftex
@noindent
@emph{Conversion} options:
@table @code
@item -a
@itemx --absolute-file-name
Use absolute file name deduction.
@item -i
@itemx --image=@file{@var{img-file}}
Reference @file{@var{img-file}} as the image file.
@end table

The @file{@var{img-file}} is a reference to a data file required only in
burning time and thus its existence is not enforced in conversion
stage.

@iftex
@sp 1
@end iftex
@noindent
@emph{Help} options:
@table @code
@item -?
@itemx --help
Give a help list.
@item --usage
Give a short usage message.
@item -V
@itemx --version
Print program version.
@end table

Mandatory or optional arguments to long options are also mandatory or
optional for any corresponding short options.





@c --- Start Compact Disc fields description;
@node Compact Disc fields
@appendix Compact Disc fields
@set cdfprefix Compact Disc fields

@c --- Start of Macros;

@macro CDfield{field}
@set field \field\
@page
@node \field\ (@value{cdfprefix})
@appendixsec @code{\field\}
@cdfFindex \field\, CD field
@cdfFindex CD field, \field\
@end macro

@set cdfFieldClass (@value{cdfprefix})

@c --- End of Macros;

This appendix describes some Compact Disc information that are common
concepts to both sheet formats.  Each following manual section
corresponds to a Compact Disc field or characteristic.  For each of
them is explained its meaning, the values it can assume and is given
an example where appropriate.  Cross references to both CCD and CUE
sheets applicable elements follow each description.

@menu
Fields:
* CATALOG: CATALOG @value{cdfFieldClass}. @
@acronym{MCN, Media Catalog Number};
* MODE: MODE  @value{cdfFieldClass}. @
Track data type;
* FLAGS: FLAGS @value{cdfFieldClass}. @
Track special sub-code flags;
* ISRC: ISRC @value{cdfFieldClass}. @
@acronym{ISRC, International Standard Recording Code};
@end menu

@c --- Field: CATALOG;
@CDfield{CATALOG}
@table @asis
@item Description
@acronym{MCN, Media Catalog Number};
@item Value
@webdoc{@acronym{UPC, Universal Product Code},
https://en.wikipedia.org/wiki/Universal_Product_Code}/@webdoc{@acronym{EAN,
European Article Number},
https://en.wikipedia.org/wiki/European_Article_Number} encoded;
exactly 13 decimal digits;
@item Example
@code{7954234679231}
@item CCD sheet
See @ccdPropertyRef{Disc, CATALOG}.
@item CUE sheet
See @cueRef{CATALOG}.
@end table

This field is usually used on CD-ROM's mastered for commercial
production.

@c --- Field: MODE;
@CDfield{MODE}
@table @asis
@item Description
Track data type;
@item Value
The following modes are defined:

@multitable @columnfractions .2 .8
@headitem Value @tab Description
@item @code{AUDIO} @tab Audio/Music (2352 --- 588 samples)
@item @code{CDG} @tab Karaoke CD+G (2448)
@item @code{MODE1/2048} @tab CD-ROM Mode 1 Data (cooked)
@item @code{MODE1/2352} @tab CD-ROM Mode 1 Data (raw)
@item @code{MODE2/2048} @tab CD-ROM XA Mode 2 Data (form 1) *
@item @code{MODE2/2324} @tab CD-ROM XA Mode 2 Data (form 2) *
@item @code{MODE2/2336} @tab CD-ROM XA Mode 2 Data (form mix)
@item @code{MODE2/2352} @tab CD-ROM XA Mode 2 Data (raw)
@item @code{CDI/2336} @tab CDI Mode 2 Data
@item @code{CDI/2352} @tab CDI Mode 2 Data
@end multitable

The modes marked with @samp{*} are not defined in the original CUE
sheet format specification.
@item CCD sheet
See @ccdPropertyRef{TRACK, MODE}
@item CUE sheet
See @cueRef{TRACK}.
@end table

@c --- Field: FLAGS;
@CDfield{FLAGS}
@table @asis
@item Description
Track special sub-code flags;
@item Value
The following flags (possibly more than one):

@multitable @columnfractions .2 .8
@headitem Value @tab Description
@item @code{DCP} @tab @strong{D}igital @strong{C}opy @strong{P}ermitted
@item @code{4CH} @tab @strong{4} @strong{CH}annel audio
@item @code{PRE} @tab @strong{PRE}-emphasis enabled (audio tracks only)
@item @code{SCMS} @tab @strong{S}erial @strong{C}opy @strong{M}anagement @strong{S}ystem
@end multitable

For non-audio tracks the special flag @code{DATA} is used implicitly.
@item CCD sheet
See @ccdPropertyRef{TRACK, FLAGS}.
@item CUE sheet
See @cueRef{FLAGS}.
@end table

@c --- Field: ISRC;
@CDfield{ISRC}
@table @asis
@item Description
@webdoc{@acronym{ISRC, International Standard Recording Code},
https://en.wikipedia.org/wiki/ISRC};
@item Value
12 characters: the first five characters are upper case alphanumeric;
the last seven are numeric only.  The code has the format:
@dfn{CCOOOYYSSSSS}, where:

@table @code
@item C
Country code;
@item O
Owner code;
@item Y
Year;
@item S
Serial number;
@end table
@item Example
@code{USRMS8371421}
@item CCD sheet
See @ccdPropertyRef{TRACK, ISRC}.
@item CUE sheet
See @cueRef{ISRC}.
@end table

This field is usually used on CD-ROM's mastered for commercial
production.

@c --- End Compact Disk fields description;





@c --- Start CCD sheet format description;
@node CCD sheet format
@appendix CCD sheet format
@set ccdprefix CCD Section

@cartouche
@quotation Warning
This appendix describes the CCD sheet format.  This description is the
result of observation, deduction and tests.  Although there is quite
uncertainty about the semantic of a number of elements, it is expected
that every applicable entry, or otherwise relevant element --- for the
production of the correspondent CUE sheet --- is well understood.  Due
to its proprietary nature, no authoritative, free and public available
reference of the CCD sheet format do exist.  Whereas the information
contained herein is thought to be accurate, there is no guarantee of
its correctness.
@end quotation
@end cartouche

The CCD sheet format is an instance of the @webdoc{INI format,
https://en.wikipedia.org/wiki/Ini_file}; a simple text file with a
basic structure composed of @emph{sections} and @emph{properties}.
The following syntactic rules apply to CCD sheets:

@enumerate
@item
Every section has a name in square brackets that appears on a line by
itself (like in @code{[CDText]}).
@item
Every property has a name and a value (in the form
@code{@var{name}=@var{value}} --- there is no space around @samp{=})
and belongs exclusively to one section: the nearest upward section.
@item
There is no explicit end-of-section delimiter (sections end at the
next section declaration or end-of-file) and sections cannot be
nested.
@item
A @samp{ } (space) can occur in a @dfn{indexed} section
(resp. property) name followed by a number (like in @code{[Session 3]}
(resp. @code{INDEX 0=17524})).
@item
Each non-indexed section (resp. property) come out only once per file
(resp. section).
@item
Indexes of sections and properties starts at the minimum value allowed
and increments sequentially.
@end enumerate

Each following manual section corresponds to a CCD sheet
@emph{section}, and each subsection within to a valid @emph{property}
of its parent section.  The sequence in which sections should be
declared in the CCD sheet is the same given below.  For each section
and property is explained its meaning, and for properties is made
explicit its value type.  A @samp{(?)} indicates the correspondent
property value is not more than believed to be right or is a guess
against which no counter example do exist so far.  In the end of each
section description is presented a code example of that section using
each available property just described.  Indexed sections and
properties are those whose syntax references @code{@var{index}}.
Unless otherwise noted, each section and property are mandatory.  The
correlation with CUE sheet format is expressed by means of cross
references to the relevant CUE commands.

@c --- Start of Helper Macro Definitions;

@set ccdSectionClass (@value{ccdprefix})

@macro ccdSection{section}
@set section \section\
@page
@node @value{section} @value{ccdSectionClass}
@appendixsec @code{\section\}
@ccdSindex \section\, CCD section
@ccdSindex CCD section, \section\
@end macro

@macro ccdSectionSyntax
@item Syntax
@code{[@value{section}]}
@end macro

@macro ccdSectionIdxSyntax
@item Syntax
@code{[@value{section} @var{index}]}
@end macro

@set ccdPropertyClass (@value{section} @value{ccdprefix})

@macro ccdProperty{property}
@set property \property\
@sp 2
@need 1700
@node @value{property} @value{ccdPropertyClass}
@appendixsubsec @code{\property\}
@ccdPindex \property\, CCD property
@ccdPindex CCD property, \property\
@end macro

@macro ccdPropertySyntax
@item Syntax
@code{@value{property}=@var{value}}
@end macro

@macro ccdPropertyIdxSyntax
@item Syntax
@code{@value{property} @var{index}=@var{value}}
@end macro

@macro CCDsheetExample{example}
@format
@t{\example\}
@end format
@end macro

@c --- End of Helper Macro Definitions;

@c --- Menu
@menu
Sections:
* CloneCD: CloneCD @value{ccdSectionClass}. Properties of the disc authoring software;
* Disc: Disc @value{ccdSectionClass}.       Properties that apply to the entire disc;
* CDText: CDText @value{ccdSectionClass}.   CD-Text meta-data;
* Session: Session @value{ccdSectionClass}. Unknown meaning;
* Entry: Entry @value{ccdSectionClass}.     Table of Contents entry;
* TRACK: TRACK @value{ccdSectionClass}.     Track layout and meta-data;
@end menu

@c --- Section: CloneCD;
@ccdSection CloneCD
@table @asis
@ccdSectionSyntax
@item Description
Properties of the disc authoring software;
@item Example
@CCDsheetExample{[CloneCD]@n
Version=3}
@end table

@c --- --- Menu;
@menu
Properties:
* Version: Version @value{ccdPropertyClass}. @
The major version of CloneCD which made the CCD sheet;
@end menu

@c --- --- Property: Version;
@ccdProperty Version
@table @asis
@ccdPropertySyntax
@item Description
The major version of CloneCD which made the CCD sheet;
@item Value
Positive integer;
@end table

@c --- Section: Disc;
@ccdSection Disc
@table @asis
@ccdSectionSyntax
@item Description
Properties that apply to the entire disc;
@item Example
@CCDsheetExample{[Disc]@n
TocEntries=18@n
Sessions=1@n
DataTracksScrambled=0@n
CDTextLength=810@n
CATALOG=5479154328763}
@end table

@c --- --- Menu
@menu
Properties:
* TocEntries: TocEntries @value{ccdPropertyClass}. @
Number of @code{Entry} sections;
* Sessions: Sessions @value{ccdPropertyClass}. @
Number of @code{Session} sections;
* DataTracksScrambled: DataTracksScrambled @value{ccdPropertyClass}. @
Unknown meaning;
* CDTextLength: CDTextLength @value{ccdPropertyClass}. @
The size in bytes of the correspondent CD-Text file
                      discarding one byte of the terminating null character;
* CATALOG: CATALOG @value{ccdPropertyClass}. @
@acronym{MCN, Media Catalog Number};
@end menu

@c --- --- Property: TocEntries;
@ccdProperty TocEntries
@table @asis
@ccdPropertySyntax
@item Description
Number of @code{Entry} sections;
@item Value
Strictly positive integer;
@end table

@c --- --- Property: Sessions;
@ccdProperty Sessions
@table @asis
@ccdPropertySyntax
@item Description
Number of @code{Session} sections;
@item Value
Strictly positive integer;
@end table

@c --- --- Property: DataTracksScrambled;
@ccdProperty DataTracksScrambled
@table @asis
@ccdPropertySyntax
@item Description
Unknown meaning;
@item Value
Non-negative integer (?);
@end table

@c --- --- Property: CDTextLength;
@ccdProperty CDTextLength
@table @asis
@ccdPropertySyntax
@item Description
The size in bytes of the correspondent CD-Text file discarding one
byte of the terminating null character; @code{0} if there is no
CD-Text meta-data;

See @cueRef{CDTEXTFILE}, for more information on the CD-Text file.
@need 4000
@item Value
Given by the formula:

@format
@group
@example
(16 + 2) * [CDText].Entries
@end example
Where:
@itemize
@item
@code{16} @arrow{} CD-Text entry length (in bytes);
@item
@code{2} @arrow{} CRC code length (in bytes);
@item
@code{[CDText].Entries} @arrow{} Value of @code{Entries} property of
@code{CDText} section;

@end itemize
@end group
@end format
@item CUE sheet
See @cueRef{CDTEXTFILE}.
@end table

@c --- --- Property CATALOG;
@ccdProperty CATALOG
@table @asis
@ccdPropertySyntax
@item Description
@acronym{MCN, Media Catalog Number};
@item Value
UPC/EAN encoded; exactly 13 decimal digits; see @cdfRef{CATALOG}.
@item CUE sheet
See @cueRef{CATALOG}.
@end table

@c --- Section: CDText;
@ccdSection CDText
@table @asis
@ccdSectionSyntax
@item Description
CD-Text meta-data; this section is entirely omitted if there is no
CD-Text meta-data.
@item Example
@CCDsheetExample{[CDText]@n
Entries=3@n
Entry 0=80 00 00 00 54 72 69 6f 20 41 63 6f 75 73 74 69@n
Entry 1=81 00 16 00 54 72 69 6f 20 41 63 6f 75 73 74 69@n
Entry 2=8f 00 2a 00 00 01 0f 00 16 14 00 00 00 00 00 00}
@item CUE sheet
@itemize @w{}
@item See @cueRef{CDTEXTFILE}.
@item See @cueRef{TITLE}.
@item See @cueRef{PERFORMER}.
@item See @cueRef{SONGWRITER}.
@end itemize
@end table

@c --- --- Menu;
@menu
Properties:
* Entries: Entries @value{ccdPropertyClass}. @
Number of Entry properties inside its CD-Text section;
* Entry: Entry @value{ccdPropertyClass}. @
A CD-Text entry;
@end menu

@c --- --- Property: Entries;
@ccdProperty Entries
@table @asis
@ccdPropertySyntax
@item Description
Number of @code{Entry} properties inside @code{CDText} section;
@item Value
Strictly positive integer;
@end table

@c --- --- Property: Entry;

@ccdProperty Entry
@table @asis
@ccdPropertyIdxSyntax
@item Description
CD-Text entry;
@item Value
The nth index is exactly the nth CD-Text file entry, omitting the 2
byte CRC code and additionally --- in the case of the last entry ---
the final null character.  It is encoded as a space-separated sequence
of 16 hexadecimal numbers of two digits @emph{without} @samp{0x} base
indicator.  Each pair of digits represents one byte.
@item Index
Non-negative integer;
@end table

@c --- Section: Session;
@ccdSection Session
@table @asis
@ccdSectionIdxSyntax
@item Description
Unknown meaning;
@item Index
Strictly positive integer;
@item Example
@CCDsheetExample{[Session 1]@n
PreGapMode=0@n
PreGapSubC=0}
@end table

@c --- --- Menu;
@menu
Properties:
* PreGapMode: PreGapMode @value{ccdPropertyClass}. @
Unknown meaning;
* PreGapSubC: PreGapSubC @value{ccdPropertyClass}. @
Unknown meaning;
@end menu

@c --- --- Property: PreGapMode;
@ccdProperty PreGapMode
@table @asis
@ccdPropertySyntax
@item Description
Unknown meaning;
@item Value
Non-negative integer (?);
@end table

@c --- --- Property: PreGapSubC;
@ccdProperty PreGapSubC
@table @asis
@ccdPropertySyntax
@item Description
Unknown meaning;
@item Value
Non-negative integer (?);
@end table

@c --- Section: Entry;
@ccdSection Entry
@table @asis
@ccdSectionIdxSyntax
@item Description
Table of Contents entry;
@item Index
Non-negative integer;
@item Example
@CCDsheetExample{[Entry 0]@n
Session=1@n
Point=0xa0@n
ADR=0x01@n
Control=0x00@n
TrackNo=0@n
AMin=0@n
ASec=0@n
AFrame=0@n
ALBA=-150@n
Zero=0@n
PMin=1@n
PSec=0@n
PFrame=0@n
PLBA=4350}
@end table

Every property whose value is an integer in hexadecimal base uses
@samp{0x} notation.

@c --- --- Menu;
@menu
Properties:
* Session: Session @value{ccdPropertyClass}. @
Unknown meaning;
* Point: Point @value{ccdPropertyClass}. @
Unknown meaning;
* ADR: ADR @value{ccdPropertyClass}. @
Unknown meaning;
* Control: Control @value{ccdPropertyClass}. @
Unknown meaning;
* TrackNo: TrackNo @value{ccdPropertyClass}. @
Unknown meaning;
* AMin: AMin @value{ccdPropertyClass}. @
Unknown meaning;
* ASec: ASec @value{ccdPropertyClass}. @
Unknown meaning;
* AFrame: AFrame @value{ccdPropertyClass}. @
Unknown meaning;
* ALBA: ALBA @value{ccdPropertyClass}. @
Unknown meaning;
* Zero: Zero @value{ccdPropertyClass}. @
Unknown meaning;
* PMin: PMin @value{ccdPropertyClass}. @
Unknown meaning;
* PSec: PSec @value{ccdPropertyClass}. @
Unknown meaning;
* PFrame: PFrame @value{ccdPropertyClass}. @
Unknown meaning;
* PLBA: PLBA @value{ccdPropertyClass}. @
Unknown meaning;
@end menu

@c --- --- Property: Session;
@ccdProperty Session
@table @asis
@ccdPropertySyntax
@item Description
Unknown meaning;
@item Value
Strictly positive integer;
@end table

@c --- --- Property: Point;
@ccdProperty Point
@table @asis
@ccdPropertySyntax
@item Description
Unknown meaning;
@item Value
Hexadecimal non-negative integer;
@end table

@c --- --- Property: ADR;
@ccdProperty ADR
@table @asis
@ccdPropertySyntax
@item Description
Unknown meaning;
@item Value
Hexadecimal non-negative integer;
@end table

@c --- --- Property: Control;
@ccdProperty Control
@table @asis
@ccdPropertySyntax
@item Description
Unknown meaning;
@item Value
Hexadecimal non-negative integer;
@end table

@c --- --- Property: TrackNo;
@ccdProperty TrackNo
@table @asis
@ccdPropertySyntax
@item Description
Unknown meaning;
@item Value
Non-negative integer;
@end table

@c --- --- Property: AMin;
@ccdProperty AMin
@table @asis
@ccdPropertySyntax
@item Description
Unknown meaning;
@item Value
Non-negative integer;
@end table

@c --- --- Property: ASec;
@ccdProperty ASec
@table @asis
@ccdPropertySyntax
@item Description
Unknown meaning;
@item Value
Non-negative integer;
@end table

@c --- --- Property: AFrame;
@ccdProperty AFrame
@table @asis
@ccdPropertySyntax
@item Description
Unknown meaning;
@item Value
Non-negative integer;
@end table

@c --- --- Property: ALBA;
@ccdProperty ALBA
@table @asis
@ccdPropertySyntax
@item Description
Unknown meaning;
@item Value
Negative integer;
@end table

@c --- --- Property: Zero;
@ccdProperty Zero
@table @asis
@ccdPropertySyntax
@item Description
Unknown meaning;
@item Value
Non-negative integer;
@end table

@c --- --- Property: PMin;
@ccdProperty PMin
@table @asis
@ccdPropertySyntax
@item Description
Unknown meaning;
@item Value
Non-negative integer;
@end table

@c --- --- Property: PSec;
@ccdProperty PSec
@table @asis
@ccdPropertySyntax
@item Description
Unknown meaning;
@item Value
Non-negative integer;
@end table

@c --- --- Property: PFrame;
@ccdProperty PFrame
@table @asis
@ccdPropertySyntax
@item Description
Unknown meaning;
@item Value
Non-negative integer;
@end table

@c --- --- Property: PLBA;
@ccdProperty PLBA
@table @asis
@ccdPropertySyntax
@item Description
Unknown meaning;
@item Value
Non-negative integer;
@end table

@c --- Section: TRACK;
@ccdSection TRACK
@table @asis
@ccdSectionIdxSyntax
@item Description
Track layout and meta-data;
@item Index
Strictly positive integer;
@item Example
@CCDsheetExample{[TRACK 1]@n
MODE=0@n
ISRC=DKKH50800101@n
INDEX 1=0@n
FLAGS=DCP 4CH PRE SCMS}
@item CUE sheet
See @cueRef{TRACK}.
@end table

@c --- --- Menu;
@menu
Properties:
* MODE: MODE @value{ccdPropertyClass}. @
Track mode/type/length;
* ISRC: ISRC @value{ccdPropertyClass}. @
@acronym{ISRC, International Standard Recording Code};
* INDEX: INDEX @value{ccdPropertyClass}. @
Index within a track;
* FLAGS: FLAGS @value{ccdPropertyClass}. @
Special sub-code flags for this track;
@end menu

@c --- --- Property: MODE;
@ccdProperty MODE
@table @asis
@ccdPropertySyntax
@item Description
Track mode; see @cdfRef{MODE}.
@item Value
Non-negative integer;
@multitable @columnfractions .1 .4
@headitem Value @tab Mode
@item @code{0} @tab AUDIO
@item @code{1} @tab MODE1/2352 (?)
@item @code{2} @tab MODE2/2352
@end multitable
@item CUE sheet
See @cueRef{TRACK}.
@end table

@c --- --- Property: ISRC;
@ccdProperty ISRC
@table @asis
@ccdPropertySyntax
@item Description
@acronym{ISRC, International Standard Recording Code}; see @cdfRef{ISRC}.
@item Value
12 characters: the first five characters are alphanumeric; the last
seven are numeric only.
@item CUE sheet
See @cueRef{ISRC}.
@end table

@c --- --- Property: INDEX;
@ccdProperty INDEX
@table @asis
@ccdPropertyIdxSyntax
@item Description
Index within a track;
@item Index
Non-negative integer;
@item Value
Non-negative integer indicating the number of frames (1/75th of a
second).
@item CUE sheet
See @cueRef{INDEX}.
@end table

@c --- --- Property: FLAGS;
@ccdProperty FLAGS
@table @asis
@ccdPropertySyntax
@item Description
Special sub-code flags for this track;
@item Value
A space separated string of the flags described in @cdfRef{FLAGS};
@item CUE sheet
See @cueRef{FLAGS}.
@end table

@c --- End of CCD sheet format description;





@c --- Start of CUE sheet format description;
@node CUE sheet format
@appendix CUE sheet format
@set cueprefix CUE Command

The CUE sheet format is a simple text file composed solely of CUE
commands, its respective arguments, blank spaces and lines.  The
following syntactic rules apply to CCD sheets:

@enumerate
@item
Each command take one, and only one, entire line.
@item
Commands are case insensitive.
@item
Commands can be indented at will.
@item
Blank lines are ignored.
@end enumerate

There are three contexts in a CUE sheet file: @dfn{None}, @dfn{File}
and @dfn{Track}.  The first of them is not introduced by any command,
and the last two are introduced by @code{FILE} and @code{TRACK}
commands, respectively.  The only commands that pertains to more than
one context, namely None and Track, are the CD-Text related commands
@code{TITLE}, @code{PERFORMER} and @code{SONGWRITER}.  The only
commands that can appear multiple times within its contexts are
@code{FILE}, @code{TRACK}, @code{INDEX} and @code{REM}.

@iftex
@sp 1
@end iftex
@noindent
The valid positions of a command are determined by the following rules:
@enumerate
@item
A command can only appear after the introduction of the context it
pertains to.
@item
Within that context the position of a command is determined by its
specific positioning rules.
@end enumerate
@iftex
@sp 1
@end iftex

Each following manual section corresponds to a CUE command.  For each
of them is explained its meaning, context structure and positioning
rules.  In the end of each section is given an example of use and is
made a reference to the correlated CCD sheet format element, if there
is any.

@iftex
@sp 1
@end iftex
@noindent
The meaning of the context tables is:
@table @asis
@item Parents
The contexts to which this command pertains; "None" here names the
context introduced by no command.
@item Multiple
Whether is allowed multiple instances of this command within a single
instance of its context; "Yes" or "No" answer.
@item Children
The commands that pertains to the context introduced by this command;
"None" if there is not one.
@end table

@iftex
@sp 1
@end iftex
@noindent
The meaning of the positioning tables is:
@table @asis
@item After
This command must appear after the commands listed here, if they are
present.  The expression "None" means nothing.
@item Before
This command must appear before the commands listed here, if they are
present.  The expression "None" means nothing.
@end table

@c --- Start of Helper Macro Definitions;

@set cueCommandClass (@value{cueprefix})

@macro cueCommand{command}
@set command \command\
@page
@node @value{command} @value{cueCommandClass}
@appendixsec @code{\command\}
@cueCindex \command\, CUE command
@cueCindex CUE command, \command\
@end macro

@macro CUEsheetExample{example}
@need 1000
@subheading Example
@format
@t{\example\}
@end format
@end macro

@c --- End of Helper Macro Definitions;

@c --- Menu;

@menu
Commands:
* CATALOG: CATALOG @value{cueCommandClass}. @
Define @acronym{MCN, Media Catalog Number}.
* CDTEXTFILE: CDTEXTFILE @value{cueCommandClass}. @
Specify the CD-Text file.
* TITLE: TITLE @value{cueCommandClass}. @
Set the title of a track or entire disc.
* PERFORMER: PERFORMER @value{cueCommandClass}. @
Write the name of a performer in a track or entire disc.
* SONGWRITER: SONGWRITER @value{cueCommandClass}. @
Write the name of a songwriter in a track or entire disc.
* FILE: FILE @value{cueCommandClass}. @
Declare the source of audio/data.
* TRACK: TRACK @value{cueCommandClass}. @
Define a track.
* FLAGS: FLAGS @value{cueCommandClass}. @
Set special sub-code flags for the current track.
* ISRC: ISRC @value{cueCommandClass}. @
Specify the @acronym{ISRC, International Standard Recording Code} of
             the current track.
* PREGAP: PREGAP @value{cueCommandClass}. @
Set the length of track pre-gap.
* INDEX: INDEX @value{cueCommandClass}. @
Define a file pre-gap, a track index or sub-index.
* POSTGAP: POSTGAP @value{cueCommandClass}. @
Set the length of track post-gap.
* REM: REM @value{cueCommandClass}. @
Comment the CUE sheet.
@end menu

@c --- --- Command: CATALOG;
@cueCommand{CATALOG}
@deffn {CUE Command} CATALOG mcn
Define @acronym{MCN, Media Catalog Number} of the disc as @var{mcn}.
The argument @var{mcn} is a number composed of 13 decimal digits in
UPC/EAN encoding as described in @cdfRef{CATALOG}.
@end deffn

@heading Context
@table @asis
@item Parents
None
@item Multiple
No
@item Children
None
@end table

@heading Position
@table @asis
@item After
None
@item Before
@itemize @w{}
@item @code{CDTEXTFILE}
@item @code{TITLE}
@item @code{PERFORMER}
@item @code{SONGWRITER}
@item @code{FILE}
@end itemize
@end table

@CUEsheetExample{CATALOG 3203040601052}

@subheading CCD sheet
See @ccdPropertyRef{Disc, CATALOG}.

@c --- --- Command: CDTEXTFILE;
@cueCommand{CDTEXTFILE}
@deffn {CUE Command} CDTEXTFILE file-name
Specify file @var{file-name} as the one containing the CD-Text
meta-data of the disc.  If @var{file-name} contains any spaces it must
be enclosed in quotation marks.
@end deffn

@noindent
The @webdoc{CD Text Encoding and Decoding Guide,
https://gnu.org/software/libcdio/cd-text-format.html} documents the
CD-Text file format.

@heading Context
@table @asis
@item Parents
None
@item Multiple
No
@item Children
None
@end table

@heading Position
@table @asis
@item After
@itemize @w{}
@item @code{CATALOG}
@end itemize
@item Before
@itemize @w{}
@item @code{TITLE}
@item @code{PERFORMER}
@item @code{SONGWRITER}
@item @code{FILE}
@end itemize
@end table

@CUEsheetExample{CDTEXTFILE músicas-com-nomes-de-garotas.cdt@n
CDTEXTFILE "EngHaw - Longe Demais das Capitais (1986).cdt"}

@subheading CCD sheet
See @ccdSectionRef{CDText}.

@c --- --- Command: TITLE;
@cueCommand{TITLE}
@deffn {CUE Command} TITLE title-string
If this command is inside a @code{TRACK} command context, make
@var{title-string} the title of the correspondent track; otherwise
make it the title of the entire disc. The value @var{title-string}
should not contain more than 80 characters.  If @var{title-string}
contains any space, it must be enclosed in quotation marks.

This command is meant for CD-Text enhanced discs.  The same data can
be retrieved from the CD-Text file using @code{CDTEXTFILE} command.
@end deffn

@heading Context
@table @asis
@item Parents
@itemize @w{}
@item None
@item @code{TRACK}
@end itemize
@item Multiple
No
@item Children
None
@end table

@heading Position
@table @asis
@item After
@itemize @w{}
@item @code{CATALOG}
@item @code{CDTEXTFILE}
@end itemize
@item Before
@itemize @w{}
@item @code{FILE}
@end itemize
@end table

@heading Position (@code{TRACK})
@table @asis
@item After
None
@item Before
@itemize @w{}
@item @code{INDEX}
@end itemize
@end table

@CUEsheetExample{TITLE "Por Quem os Sinos Dobram"@n
TITLE S.O.S.}

@subheading CCD sheet
The CCD sheet format support this feature only by means of a general
mechanism designed to specify indiscriminately any CD-Text encoded
entry.  See @ccdSectionRef{CDText}.

@c --- --- Command: PERFORMER;
@cueCommand{PERFORMER}
@deffn {CUE Command} PERFORMER performer-string
If this command is inside a @code{TRACK} command context, write
@var{performer-string} as the name of the performer of the
correspondent track; otherwise write it as the name of the performer of
the entire disc. The value @var{title-string} should not contain more
than 80 characters.  If @var{title-string} contains any space, it must
be enclosed in quotation marks.

This command is meant for CD-Text enhanced discs.  The same data can
be retrieved from the CD-Text file using @code{CDTEXTFILE} command.
@end deffn

@heading Context
@table @asis
@item Parents
@itemize @w{}
@item None
@item @code{TRACK}
@end itemize
@item Multiple
No
@item Children
None
@end table

@heading Position
@table @asis
@item After
@itemize @w{}
@item @code{CATALOG}
@item @code{CDTEXTFILE}
@end itemize
@item Before
@itemize @w{}
@item @code{FILE}
@end itemize
@end table

@heading Position (@code{TRACK})
@table @asis
@item After
None
@item Before
@itemize @w{}
@item @code{INDEX}
@end itemize
@end table

@CUEsheetExample{PERFORMER "Detonator e as Musas do Metal"@n
PERFORMER Metrô}

@subheading CCD sheet
The CCD sheet format support this feature only by means of a general
mechanism designed to specify indiscriminately any CD-Text encoded
entry.  See @ccdSectionRef{CDText}.

@c --- --- Command: SONGWRITER;
@cueCommand{SONGWRITER}
@deffn {CUE Command} SONGWRITER song-writer-string
If this command is inside a @code{TRACK} command context, write
@var{song-writer-string} as the name of the song writer of the
correspondent track; otherwise write it as the name of the song writer
of the entire disc. The value @var{song-writer-string} should not
contain more than 80 characters.  If @var{song-writer-string} contains
any space, it must be enclosed in quotation marks.

This command is meant for CD-Text enhanced discs.  The same data can
be retrieved from the CD-Text file using @code{CDTEXTFILE} command.
@end deffn

@heading Context
@table @asis
@item Parents
@itemize @w{}
@item None
@item @code{TRACK}
@end itemize
@item Multiple
No
@item Children
None
@end table

@heading Position
@table @asis
@item After
@itemize @w{}
@item @code{CATALOG}
@item @code{CDTEXTFILE}
@end itemize
@item Before
@itemize @w{}
@item @code{FILE}
@end itemize
@end table

@heading Position (@code{TRACK})
@table @asis
@item After
None
@item Before
@itemize @w{}
@item @code{INDEX}
@end itemize
@end table

@CUEsheetExample{SONGWRITER
"Stefani Joanne Angelina Germanotta"@n
SONGWRITER Getz}

@subheading CCD sheet
The CCD sheet format support this feature only by means of a general
mechanism designed to specify indiscriminately any CD-Text encoded
entry.  See @ccdSectionRef{CDText}.

@c --- --- Command: FILE;
@cueCommand{FILE}
@deffn {CUE Command} FILE file-name file-type
Declare file @var{file-name} of type @var{file-type} as the one whose
data will be used in the following @code{TRACK} command contexts by
@code{INDEX} commands.  If @var{file-name} contains any space, it must
be enclosed in quotation marks.

There are a total of 5 types @var{file-type} can take: two types for
raw data and three for audio.  The raw data types are @emph{BINARY}
and @emph{MOTOROLA}, and they differ only in endianness --- little and
big endian respectively.  The audio types are @emph{AIFF}, @emph{WAVE}
and @emph{MP3} and the correspondent files must be setup to 44.1 KHz,
16 bits and stereo.  The following table summarizes it:

@table @code
@item BINARY
Intel binary raw data @webdoc{Little-endian,
https://en.wikipedia.org/wiki/Little_endian#Little-endian} --- least
significant byte first).
@item MOTOROLA
Motorola binary raw data @webdoc{Big-endian,
https://en.wikipedia.org/wiki/Big_endian#Big-endian} --- most
significant byte first).
@item AIFF
Audio data in @webdoc{@acronym{AIFF, Audio Interchange File Format},
https://en.wikipedia.org/wiki/Aiff}.
@item WAVE
Audio data in @webdoc{@abbr{WAVE, Waveform Audio File Format},
https://en.wikipedia.org/wiki/Waveform_Audio_File_Format}.
@item MP3
Audio data in @webdoc{@acronym{MP3, MPEG-1 or MPEG-2 Audio Layer III},
https://en.wikipedia.org/wiki/Mp3}.
@end table

@end deffn

@heading Context
@table @asis
@item Parents
None
@item Multiple
Yes
@item Children
@itemize @w{}
@item @code{TRACK}
@end itemize
@end table

@heading Position
@table @asis
@item After
@itemize @w{}
@item @code{CATALOG}
@item @code{CDTEXTFILE}
@end itemize
@item Before
None
@end table

@CUEsheetExample{FILE guix-1.0.iso BINARY@n
FILE "The Free Software Song.wav" WAVE}

@subheading CCD sheet

Since the CCD sheet file is not meant to be composed from scratch by
an user or authoring software, rather created to mimic an existing
disc layout, it is assumed that the source of data are the CCD image
and sub-channel files, which have predefined formats and names.  Thus
there is no related explicit element in the CCD sheet format.

Among the CCD set files, is presumed that the source of audio/data is
a file with the same base name of the CCD sheet file, but with a
different extension, to indicate its specific purpose, namely
@file{.img}.  It is believed the type of such file is @code{MOTOROLA}.

@c --- --- Command: TRACK
@cueCommand{TRACK}
@deffn {CUE Command} TRACK number data-type
Define the @var{number}th track, whose type is @var{data-type}.  The
value @var{number} is a strictly positive integer and must be one
greater than the last one supplied to a previous @code{TRACK} command,
notwithstanding @var{number} can be greater than @code{1} in the first
occurrence of @code{TRACK} command; however it cannot exceed @code{99}
in any case.  Usually @var{number} is padded with a @code{0} on the
left when smaller than @code{10}, in order to keep track numbers two
digit wide uniformly throughout the CUE sheet.  The @var{data-type}
argument is one of those described at @cdfRef{MODE}.

This command should appear at least once in the CUE sheet file.
@end deffn

@heading Context
@table @asis
@item Parents
@itemize @w{}
@item @code{FILE}
@end itemize
@item Multiple
Yes
@item Children
@itemize @w{}
@item @code{FLAGS}
@item @code{ISRC}
@item @code{TITLE}
@item @code{PERFORMER}
@item @code{SONGWRITER}
@item @code{PREGAP}
@item @code{INDEX}
@item @code{POSTGAP}
@end itemize
@end table

@heading Position
@table @asis
@item After
None
@item Before
None
@end table

@CUEsheetExample{TRACK 1 MODE2/2352@n
TRACK 37 AUDIO}

@subheading CCD sheet
See @ccdSectionRef{TRACK}.

@c --- --- Command: FLAGS;
@cueCommand{FLAGS}
@deffn {CUE Command} FLAGS flag_1 flag_2 @dots{} flag_n
Set special sub-code flags @code{flag_1}@dots{}@code{flag_n} for the
current track.  Flags are separated by space.  For the allowed flags
and its respective meanings, see @cdfRef{FLAGS}.
@end deffn

@heading Context
@table @asis
@item Parents
@itemize @w{}
@item @code{TRACK}
@end itemize
@item Multiple
No
@item Children
None
@end table

@heading Position
@table @asis
@item After
None
@item Before
@itemize @w{}
@item @code{INDEX}
@end itemize
@end table

@CUEsheetExample{FLAGS DCP@n
FLAGS 4CH PRE}

@subheading CCD sheet
See @ccdPropertyRef{TRACK, FLAGS}.

@c --- --- Command: ISRC;
@cueCommand{ISRC}
@deffn {CUE Command} ISRC code
Specify the @acronym{ISRC, International Standard Recording Code} to
the current track.  The value @var{code} is described at
@cdfRef{ISRC}.

This command only apply to audio tracks.
@end deffn

@heading Context
@table @asis
@item Parents
@itemize @w{}
@item @code{TRACK}
@end itemize
@item Multiple
No
@item Children
None
@end table

@heading Position
@table @asis
@item After
None
@item Before
@itemize @w{}
@item @code{INDEX}
@end itemize
@end table

@CUEsheetExample{ISRC DKKH50800101}

@subheading CCD sheet
See @ccdPropertyRef{TRACK, ISRC}.

@c --- --- Command: PREGAP;
@cueCommand{PREGAP}
@deffn {CUE Command} PREGAP mm:ss:ff
Set the length of the current track pre-gap to @var{mm} minutes plus
@var{ss} seconds plus @var{ff} frames.

The values @var{mm}, @var{ss} and @var{ff} must be non-negative
integers.

A frame is the 75th part of a second.

No data is consumed from the file specified in the current @code{FILE}
command context.
@end deffn

@heading Context
@table @asis
@item Parents
@itemize @w{}
@item @code{TRACK}
@end itemize
@item Multiple
No
@item Children
None
@end table

@heading Position
@table @asis
@item After
None
@item Before
@itemize @w{}
@item @code{INDEX}
@end itemize
@end table

@CUEsheetExample{PREGAP 00:02:00}

@subheading CCD sheet
No CCD sheet element analogous or directly related to this command is
known.

@c --- --- Command: INDEX;
@cueCommand{INDEX}
@deffn {CUE Command} INDEX number mm:ss:ff
If @var{number} is @code{0}, then consider the time specified by the
next @code{INDEX} command as the track pre-gap length present in the
file declared by the current @code{FILE} command context.

If @var{number} is @code{1}, then define the starting time of the
index of this track as @var{mm} minutes plus @var{ss} seconds plus
@var{ff} frames.  This index specify the starting time of track data
and is the only stored in the table-of-contents of the disc.

If @var{number} is @code{2} or more, then define the starting time of
the @math{(@var{number}-1)}th sub-index within this track as @var{mm}
minutes plus @var{ss} seconds plus @var{ff} frames.

If this is the first @code{INDEX} command of the current @code{TRACK}
command context, then it must start at @code{00:00:00} and
@var{number} must be either @code{0} or @code{1}.

If this is not the first @code{INDEX} command of the current
@code{TRACK} command context, then @var{number} must be one greater
than that of the last @code{TRACK} command.

The value @var{number} cannot be greater than @code{99} and is usually
padded with a @code{0} on the left when smaller than @code{10}, in
order to keep index and sub-index numbers two digit wide uniformly
throughout the CUE sheet.

The time @code{mm:ss:ff} is an offset relative to the beginning of the
file specified by the current @code{FILE} command context.

The values @var{mm}, @var{ss} and @var{ff} must be non-negative
integers.

There are 75 frames per second.
@end deffn

@heading Context
@table @asis
@item Parents
@itemize @w{}
@item @code{TRACK}
@end itemize
@item Multiple
Yes
@item Children
None
@end table

@heading Position
@table @asis
@item After
@itemize @w{}
@item @code{FLAGS}
@item @code{ISRC}
@item @code{TITLE}
@item @code{PERFORMER}
@item @code{SONGWRITER}
@item @code{PREGAP}
@end itemize
@item Before
@itemize @w{}
@item @code{POSTGAP}
@end itemize
@end table

@CUEsheetExample{INDEX 00 00:00:00@n
INDEX 01 00:02:00@n
INDEX 02 03:23:54}

@subheading CCD sheet
See @ccdPropertyRef{TRACK, INDEX}.

@c --- --- Command: POSTGAP;
@cueCommand{POSTGAP}
@deffn {CUE Command} POSTGAP mm:ss:ff
Set the length of the current track post-gap to @var{mm} minutes plus
@var{ss} seconds plus @var{ff} frames.

The values @var{mm}, @var{ss} and @var{ff} must be non-negative
integers.

A frame is the 75th part of a second.

No data is consumed from the file specified in the current @code{FILE}
command context.
@end deffn

@heading Context
@table @asis
@item Parents
@itemize @w{}
@item @code{TRACK}
@end itemize
@item Multiple
No
@item Children
None
@end table

@heading Position
@table @asis
@item After
@itemize @w{}
@item @code{INDEX}
@end itemize
@item Before
None
@end table

@CUEsheetExample{POSTGAP 00:02:00}

@subheading CCD sheet
No CCD sheet element analogous or directly related to this command is
known.

@c --- --- Command: REM;
@cueCommand{REM}
@deffn {CUE Command} REM comment
Ignore @var{comment}.

The value @var{comment} can be any string of arbitrary length, but it
ends at end-of-line.

Its practical use is to comment the CUE sheet for the human
comprehension sake.

There is no way to make multi-line comments, the best one can get is
to start consecutive lines with this command.
@end deffn

@heading Context
@table @asis
@item Parents
None
@item Multiple
Yes
@item Children
None
@end table

@heading Position
@table @asis
@item After
None
@item Before
None
@end table

@CUEsheetExample{REM There is no system but GNU@n
REM and Linux-Libre is just one of its kernels.}

@subheading CCD sheet
No CCD sheet element analogous or directly related to this command is
known.





@c --- GNU General Public License;
@node GNU General Public License
@appendix GNU General Public License
@cindex license of ccd2cue
@cindex ccd2cue license
@cindex copying ccd2cue
@cindex ccd2cue copying
@cindex program license
@cindex program copying

@include gpl.texi





@c --- GNU Free Documentation License;
@node GNU Free Documentation License
@appendix GNU Free Documentation License
@cindex license documentation
@cindex documentation license
@cindex license of manual
@cindex manual license
@cindex copying documentation
@cindex documentation copying
@cindex copying manual
@cindex manual copying

@include fdl.texi





@c --- Index;
@node Index
@unnumbered Index

@printindex cp

@bye
